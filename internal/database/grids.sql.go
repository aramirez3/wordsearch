// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: grids.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createGrid = `-- name: CreateGrid :one
INSERT INTO grids
    (id, created_at, updated_at, grid)
    values($1, $2, $3, $4)
RETURNING id, created_at, updated_at, grid
`

type CreateGridParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Grid      string
}

func (q *Queries) CreateGrid(ctx context.Context, arg CreateGridParams) (Grid, error) {
	row := q.db.QueryRowContext(ctx, createGrid,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Grid,
	)
	var i Grid
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Grid,
	)
	return i, err
}

const deleteAllGrids = `-- name: DeleteAllGrids :exec
DELETE FROM grids
`

func (q *Queries) DeleteAllGrids(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllGrids)
	return err
}

const deleteGridById = `-- name: DeleteGridById :exec
DELETE FROM grids WHERE id=$1
`

func (q *Queries) DeleteGridById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteGridById, id)
	return err
}

const getGridById = `-- name: GetGridById :one
SELECT id, created_at, updated_at, grid FROM grids WHERE id=$1
`

func (q *Queries) GetGridById(ctx context.Context, id uuid.UUID) (Grid, error) {
	row := q.db.QueryRowContext(ctx, getGridById, id)
	var i Grid
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Grid,
	)
	return i, err
}
